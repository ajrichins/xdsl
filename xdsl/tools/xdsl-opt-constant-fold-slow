#!/usr/bin/env python3

import argparse
from xdsl.xdsl_opt_main import xDSLOptMain
from xdsl.pattern_rewriter import RewritePattern, PatternRewriter, GreedyRewritePatternApplier, PatternRewriteWalker

from xdsl.dialects.builtin import ModuleOp, IntegerAttr
from xdsl.dialects.arith import Constant, Addi
from xdsl.ir import Attribute, Operation, SSAValue, MLContext
from xdsl.pattern_rewriter import (GreedyRewritePatternApplier,
                                   PatternRewriter, PatternRewriteWalker,
                                   RewritePattern, op_type_rewrite_pattern)
from dataclasses import dataclass

@dataclass
class BinaryExprRewriter(RewritePattern):

    def is_integer_literal(self, op):
        return isinstance(op, Constant) and isinstance(op.value, IntegerAttr)

    @op_type_rewrite_pattern
    def match_and_rewrite(  # type: ignore reportIncompatibleMethodOverride
            self, expr: Addi, rewriter: PatternRewriter) -> None:
        if self.is_integer_literal(
                expr.lhs.op) and self.is_integer_literal(expr.rhs.op):
            lhs_value = expr.lhs.op.value.parameters[0].data
            rhs_value = expr.rhs.op.value.parameters[0].data
            result_value = lhs_value + rhs_value

            new_constant = Constant.from_int_constant(result_value, expr.results[0].typ)
            rewriter.replace_op(expr, [new_constant])
        return


def constant_folding(ctx: MLContext, module: ModuleOp) -> ModuleOp:
    walker = PatternRewriteWalker(
        GreedyRewritePatternApplier([
            BinaryExprRewriter(),
        ]), apply_recursively=False, walk_reverse=True)

    walker.rewrite_module(module)

    module = module.clone()

    walker.rewrite_module(module)

    return module

class OptMain(xDSLOptMain):

    def register_all_dialects(self):
        super().register_all_dialects()

    def register_all_passes(self):
        super().available_passes['constant-fold'] = constant_folding
        super().register_all_passes()

    def register_all_arguments(self, arg_parser: argparse.ArgumentParser):
        super().register_all_arguments(arg_parser)


def __main__():
    xdsl_main = OptMain()
    xdsl_main.run()


if __name__ == "__main__":
    __main__()
